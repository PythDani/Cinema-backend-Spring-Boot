LINEA DE COMANDOS GENERALES
................................

Pwd ..........>tu carpeta actual

mkdir.........>crear una carpeta o directorio

cd / ............> ir al home

cd ..            > ir a directorio anterior

ls ..............>listar archivos

ls -al ..........>listar archivos (todos y ocultos)

ls -a ...........>grupo de archivos pero no en una lista

Ctr +L ...........> LIMPIAR CONSOLA

history ..........>lista con los ultimos comandos

touch ............>crea un archivo en el directorio actual


cat + nombrearchivo .......> contenidio de archivo

rm + archivo  ............> remover 

comando+ --help    .......>info del comando


........................................

CREANDO UN REPOSITORIO Y OPCIONES

(Ubicarnos en la carpeta de nuestro proyecto)

................................

git init     .....> crear repositorio


git status .......> info sobre el estado del proyecto.   (HEAD: version mas reciente ->NOMBRE DE RAMA : RAMA EN LA QUE TE ENCUENTRAS)


git add + <archivo> ...> trackear archivos al (STAGE)

git add .  .......> "con el punto añadimos todos los archivos"

git rm --cached +<archivo>  sacarlo del track


git commit -m "MENSAJE"  ....> Enviar cambios al repositorio

git commit -am "MENSAJE" ....> Enviar cambios al repositorio cuando no es la primera vez 

   VENTANA: SCP + I.."Escribir mensaje"
            SCP +CTR + zz "Salir del cuadro de edicion de mensaje"

            SCP +shift+zz salir del texto grande

git config -l   ...."info de configuracion de tu git y lo que falta" 
   
git config --list --show-orogin  >"donde estan las configuraciones guardadas"


git config --global user.name "TU nombre" ......>introducir nombre

git config --global user.email "TU email"  ......> introducir mail

git show <archivo>    ...........> "informacion detallada de los cambios que se hicieron "

git log <archivo> .................> historia de commits"

git diff + tag version i + tag version j ..........comparamos tag version i vs tag version j

git checkout +Tag version i..............> traer versiones a directorio (se visualizan los cambios)

git reset + tag version i --hard   ......................volver a un estado anterior (Peligroso)

git reset + tag version i --soft ..................... no borra lo que tengas en Stagen


git log --oneline ........>Te muestra el id commit y el título del commit.

git log --decorate  ......>Te muestra donde se encuentra el head point en el log.

git log --decorate .......> muestra Autor y fecha del commit

git log --stat ..........>Detalla brevemente el número de lineas que se modificaron b

git log -p ..............> Explica el número de líneas que se cambiaron y te muestra lo que se cambió en el contenido.

git shortlog    ..........>Indica que commits ha realizado un usuario, mostrando el usuario y el titulo de sus commits.

git log --graph --oneline --decorate  ............>muestra las ramas 


git log -3 .....> limitamos el numero de commits

git log --after=“2018-1-2”  .....................Commits para localizar por fechas.

git log --after=“today”     .....................Commits para localizar por fechas.

git log --after=“2018-1-2” --before=“today”......Commits para localizar por fechas.

git log --author=“Name Author” - Commits realizados por autor que cumplan exactamente con el nombre.

git log --grep=“INVIE” - Busca los commits que cumplan tal cual está escrito entre las comillas.

git log --grep=“INVIE” –i- Busca los commits que cumplan sin importar mayúsculas o minúsculas.
g
git log – index.html- Busca los commits en un archivo en específico.

git log -S “Por contenido”- Buscar los commits con el contenido dentro del archivo.

git log > log.txt - guardar los logs en un archivo txt

.................................................................
.................................................................

                      CREATING BRANCHES - CREANDO RAMAS (BRANCHES AND MERGE)
.................................................................
.................................................................


git branch NOMBRE RAMA NUEVA ....>Creamos Rama nueva

git Checkout nombre rama .......>nos movemos a la rama que deseamos

git merge .....> detalles de las ramas existentes 

git merge NOMBRE DE LA RAMA Que queremos traer para fusionar.........>FUSIONAR RAMAS

git fetch  .........> en internet El comando git fetch descarga commits, archivos y referencias de un repositorio remoto a tu repositorio local. 

............................................................................
............................................................................

          REBASE
..........................................................................
...............................................................................

git rebase master (Desde la rama experimento)

........................................................
.........................................................


gitk ..............muestra la historia

git stash........volver a un estado anterior

git stash pop....> investigar


git stash drop......> borrar el stash 

git clean --dry-run.....> simular lo que se  borrar archivos 

git clean -f ...............> borrar lo mencionado anteriormente

git cherry-pick +hash......> traer commits viejos al head de un branch hash: el hash que queremos traer.



...................................................................
....................................................................
          
                           GIT HUB
.....................................................................
................................................................

git remote add origin https://xxxxx.github.com ....> agregar origen remoto

git remote ........> para ver el origen creado

git remote -v .........>ver direcciones vinculadas al origen https://

git remote add upstream htpp://wwxxxx.com......Traer otro repositorio remoto al local

git clone https://   ...........>Cuando hacemos un Fork en git hub usamos este comando para importarlo copiando la Url del repositorio

git pull origin master  ...> traemos primero informacion del repositorio git hub

git pull origin master --allow-unrelated-histories  ..........>cuando aparece fatal: refusing to merge unrelated histories (fusionar rama de repositorio con rama local)
 
git push origin master ....>Hacer push al repositorio remoto en git hub


......................................................

NOTAS DE INTERES:



>OJO: "Si SE MODIFICA un archivo de una rama y hacemos Checkout a otra sin antes hacer el commit,

Perdemos la informacion que hemos hecho"


>"Se puede crear una rama de prueba para ir trabajando  en ella y luego fusionar (por ejemplo corregir errores ortograficos)


> Al hacer Push de una rama a repositorio para hacer pull request y luego esta rama es borrada en dicho repositorio remoto, no podemos hacer pull a nuestro repositorio local, para esto debemos cambiar la rama con git checkout a la rama fusionada(Generalmente la rama master)



             CONFIGURAR LLAVE SSH PARA CONECTARSE A GITHUB


git config -l

git config --global user.email "email@gmail.com"



$ ssh-keygen -t rsa -b 4069 -C "email@gmail.com"    #luego de este comando damos enter, y si deseas luego enter o puedes hacer una contraseña

$ eval $(ssh-agent -s)    "verificamos si está corriendo"

$ ssh-add ~/.ssh/id_rsa   "añadir llave ssh"
